# Generated by Django 3.2.15 on 2022-10-07 07:40

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='A1c',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('a1c', models.FloatField(blank=True, max_length=20, null=True)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BloodPressure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('systolic', models.FloatField(blank=True, null=True)),
                ('diastolic', models.FloatField(blank=True, null=True)),
                ('pulse', models.IntegerField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BloodSuger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('sugar', models.IntegerField(blank=True, null=True)),
                ('exercise', models.CharField(blank=True, max_length=20, null=True)),
                ('drug', models.CharField(blank=True, max_length=20, null=True)),
                ('timeperiod', models.IntegerField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Care',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('member_id', models.CharField(max_length=20, null=True)),
                ('reply_id', models.IntegerField(null=True)),
                ('message', models.CharField(max_length=100, null=True)),
                ('notice', models.CharField(max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('description', models.CharField(blank=True, max_length=20, null=True)),
                ('meal', models.IntegerField(blank=True, null=True)),
                ('tag', user.models.ListField(blank=True, max_length=20, null=True)),
                ('image', models.IntegerField(blank=True, null=True)),
                ('lat', models.FloatField(blank=True, max_length=20, null=True)),
                ('lng', models.FloatField(blank=True, max_length=20, null=True)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('account', models.CharField(max_length=20, null=True, unique=True)),
                ('usersession', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('type', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=20)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Friendlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('relation_id', models.CharField(max_length=20)),
                ('type', models.IntegerField(null=True)),
                ('status', models.CharField(max_length=20)),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Medicalinfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('diabetes_type', models.IntegerField(null=True)),
                ('oad', models.BooleanField(default=False)),
                ('insulin', models.BooleanField(default=False)),
                ('anti_hypertensives', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserDefault',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20, null=True)),
                ('sugar_delta_max', models.IntegerField(blank=True, null=True)),
                ('sugar_delta_min', models.IntegerField(blank=True, null=True)),
                ('sugar_morning_max', models.IntegerField(blank=True, null=True)),
                ('sugar_morning_min', models.IntegerField(blank=True, null=True)),
                ('sugar_evening_max', models.IntegerField(blank=True, null=True)),
                ('sugar_evening_min', models.IntegerField(blank=True, null=True)),
                ('sugar_before_max', models.IntegerField(blank=True, null=True)),
                ('sugar_before_min', models.IntegerField(blank=True, null=True)),
                ('sugar_after_max', models.IntegerField(blank=True, null=True)),
                ('sugar_after_min', models.IntegerField(blank=True, null=True)),
                ('systolic_max', models.IntegerField(blank=True, null=True)),
                ('systolic_min', models.IntegerField(blank=True, null=True)),
                ('diastolic_max', models.IntegerField(blank=True, null=True)),
                ('diastolic_min', models.IntegerField(blank=True, null=True)),
                ('pulse_max', models.IntegerField(blank=True, null=True)),
                ('pulse_min', models.IntegerField(blank=True, null=True)),
                ('weight_max', models.IntegerField(blank=True, null=True)),
                ('weight_min', models.IntegerField(blank=True, null=True)),
                ('bmi_max', models.IntegerField(blank=True, null=True)),
                ('bmi_min', models.IntegerField(blank=True, null=True)),
                ('body_fat_max', models.IntegerField(blank=True, null=True)),
                ('body_fat_min', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('after_recording', models.BooleanField(default=False, max_length=20)),
                ('no_recording_for_a_day', models.BooleanField(default=False, max_length=20)),
                ('over_max_or_under_min', models.BooleanField(default=False, max_length=20)),
                ('after_meal', models.BooleanField(default=False, max_length=20)),
                ('unit_of_sugar', models.BooleanField(default=False, max_length=20)),
                ('unit_of_weight', models.BooleanField(default=False, max_length=20)),
                ('unit_of_height', models.BooleanField(default=False, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Weight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=20)),
                ('weight', models.FloatField(blank=True, null=True)),
                ('body_fat', models.FloatField(blank=True, null=True)),
                ('bmi', models.FloatField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=20, null=True)),
                ('account', models.CharField(max_length=20, null=True, unique=True)),
                ('email', models.CharField(max_length=20, null=True)),
                ('phone', models.CharField(max_length=20, null=True, unique=True)),
                ('fb_id', models.CharField(max_length=20, null=True)),
                ('status', models.CharField(max_length=20, null=True)),
                ('group', models.CharField(max_length=20, null=True)),
                ('birthday', models.CharField(max_length=20, null=True)),
                ('height', models.FloatField(null=True)),
                ('weight', models.CharField(max_length=20, null=True)),
                ('gender', models.BooleanField(default=False, max_length=20)),
                ('address', models.CharField(max_length=20, null=True)),
                ('unread_records', models.CharField(max_length=20, null=True)),
                ('verified', models.BooleanField(default=False, max_length=20)),
                ('privacy_policy', models.BooleanField(default=False, max_length=20)),
                ('must_change_password', models.BooleanField(default=False, max_length=20)),
                ('fcm_id', models.CharField(max_length=20, null=True)),
                ('badge', models.CharField(max_length=20, null=True)),
                ('login_times', models.IntegerField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('verificationCode', models.CharField(max_length=20, null=True)),
                ('password', models.CharField(max_length=50, null=True)),
                ('invite_code', models.CharField(max_length=20, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
